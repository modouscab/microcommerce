# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code,save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  #vmImage: 'ubuntu-latest' # other options: 'macOS-10.14', 'vs2017-win2016'
  vmImage: 'ubuntu-16.04' 
  demands: maven
  
variables:
  imageName: 'pipelines-javascript-docker'

steps:
- task: Maven@3
  displayName: 'Build maven and Tests'
  inputs:
    mavenPomFile: 'pom.xml'
    codeCoverageToolOption: Cobertura
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'clean package'

- task: CopyFiles@2
  displayName: 'Copie jar to: $(build.artifactstagtagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**/*.jar'
    TargetFolder: '$(build.artifactstagtagingdirectory)'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'  
  inputs:
    PathtoPublish: '$(build.artifactstagtagingdirectory)'
  condition: succeededOrFailed()
  
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

#*************************************End build docker image****************************
steps:
- task: Docker@2
  displayName: Build an image
  inputs:
    repository: $(imageName)
    command: build
    Dockerfile: app/Dockerfile
#*************************************End build docker image****************************
pool:
  #vmImage: 'ubuntu-latest' # other options: 'macOS-10.14', 'vs2017-win2016'
  vmImage: 'ubuntu-16.04' 
  demands: maven 
steps:
  task: Package  
  displayName: 'Containerization'
script:
  - apk add --no-cache docker
  - docker login mcroservicecontainerregistry.azurecr.io -u $(acrusername) -p $(acrpassword)
  - docker tag nginx mcroservicecontainerregistry.azurecr.io/samples/nginx
  - docker build --pull -t $IMAGE_TAG .
  - docker push $IMAGE_TAG
 image: openjdk:8-alpine